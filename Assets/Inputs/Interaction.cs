//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Actions/Interaction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Interaction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Interaction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Interaction"",
    ""maps"": [
        {
            ""name"": ""NPC"",
            ""id"": ""5f21ab72-bbca-4ffe-a953-2385c9a0a3f6"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""58d1b4df-2c0b-427e-883b-08abe71c515c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8201625d-9065-40a4-8d2d-8d7b16714699"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""506e9b7f-4e37-4669-a7d8-de85fbdbe0e2"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // NPC
        m_NPC = asset.FindActionMap("NPC", throwIfNotFound: true);
        m_NPC_Interact = m_NPC.FindAction("Interact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // NPC
    private readonly InputActionMap m_NPC;
    private List<INPCActions> m_NPCActionsCallbackInterfaces = new List<INPCActions>();
    private readonly InputAction m_NPC_Interact;
    public struct NPCActions
    {
        private @Interaction m_Wrapper;
        public NPCActions(@Interaction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_NPC_Interact;
        public InputActionMap Get() { return m_Wrapper.m_NPC; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NPCActions set) { return set.Get(); }
        public void AddCallbacks(INPCActions instance)
        {
            if (instance == null || m_Wrapper.m_NPCActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NPCActionsCallbackInterfaces.Add(instance);
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(INPCActions instance)
        {
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(INPCActions instance)
        {
            if (m_Wrapper.m_NPCActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INPCActions instance)
        {
            foreach (var item in m_Wrapper.m_NPCActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NPCActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NPCActions @NPC => new NPCActions(this);
    public interface INPCActions
    {
        void OnInteract(InputAction.CallbackContext context);
    }
}
